import { createClient } from "@supabase/supabase-js";

// üîê Variables d'environnement (s√©curis√©es via .env)
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || "";
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || "";

// üß© Client Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// üì¶ Structure d‚Äôun enregistrement de quiz (doit correspondre √† la table Supabase)
export interface QuizResultRecord {
  id?: string;
  first_name: string;
  last_name: string;
  training_date: string;
  instructor_name: string;
  score: number;
  passed: boolean;
  answers: number[]; // Index des r√©ponses donn√©es
  completed_at: string; // ISO string
  created_at?: string;  // Supabase l‚Äôajoute automatiquement
}

// ‚úÖ Fonction : Enregistrer un r√©sultat
export const saveQuizResult = async (result: QuizResultRecord) => {
  const { data, error } = await supabase
    .from("quiz_results")
    .insert([result])
    .select()
    .single();

  if (error) {
    console.error("‚ùå Erreur lors de l‚Äôenregistrement :", error);
    throw error;
  }

  return data;
};

// ‚úÖ Fonction : R√©cup√©rer l‚Äôhistorique des r√©sultats
export const getQuizResults = async () => {
  const { data, error } = await supabase
    .from("quiz_results")
    .select("*")
    .order("created_at", { ascending: false });

  if (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des r√©sultats :", error);
    throw error;
  }

  return data;
};
